from beaverhabits.configs import StorageType, settings, logger from beaverhabits.storage.session_file import SessionDictStorage, SessionStorage from beaverhabits.storage.storage import UserStorage from beaverhabits.storage.user_db import UserDatabaseStorage from beaverhabits.storage.user_file import UserDiskStorage import asyncio import aiofiles import json session_storage = SessionDictStorage() user_disk_storage = UserDiskStorage() user_database_storage = UserDatabaseStorage() sqlite_storage = None async def get_sessions_storage() -> SessionStorage:     return session_storage async def get_user_storage() -> UserStorage:     if settings.HABITS_STORAGE == StorageType.USER_DISK:         return user_disk_storage     if settings.HABITS_STORAGE == StorageType.USER_DATABASE:         return user_database_storage     logger.error("Storage type not implemented")     raise NotImplementedError("Storage type not implemented") async def merge_habit_lists_intelligently(user_storage: UserStorage, user: User, other: DictHabitList) -> DictHabitList:     try:         current = await user_storage.get_user_habit_list(user)         if current is None:             return other         return await current.merge(other)     except Exception as e:         logger.exception(f"Error merging habit lists: {e}")         raise async def save_user_habit_list_async(user_storage: UserStorage, user: User, habit_list: DictHabitList) -> None:     try:         await user_storage.save_user_habit_list(user, habit_list)     except Exception as e:         logger.exception(f"Error saving user habit list: {e}")         raise async def get_user_habit_list_async(user_storage: UserStorage, user: User) -> Optional[DictHabitList]:     try:         return await user_storage.get_user_habit_list(user)     except Exception as e:         logger.exception(f"Error getting user habit list: {e}")         raise