import datetime\nfrom dataclasses import dataclass, field\nfrom typing import Optional, List\nimport logging\nfrom beaverhabits.storage.storage import CheckedRecord, Habit, HabitList, SessionStorage, UserStorage\nfrom beaverhabits.utils import generate_short_hash\n\nDAY_MASK = "%Y-%m-%d"\nMONTH_MASK = "%Y/%m"\n\nlogging.basicConfig(level=logging.INFO)\n\n@dataclass(init=False)\nclass DictStorage:\n    data: dict = field(default_factory=dict, metadata={"exclude": True})\n\n@dataclass\nclass DictRecord(CheckedRecord, DictStorage):\n    """\n    # Read (d1~d3)\n    persistent    ->     memory      ->     view\n    d0: [x]              d0: [x]\n                                            d1: [ ]\n    d2: [x]              d2: [x]            d2: [x]\n                                            d3: [ ]\n    # Update:\n    view(update)  ->     memory      ->     persistent\n    d1: [ ]\n    d2: [ ]              d2: [ ]            d2: [x]\n    d3: [x]              d3: [x]            d3: [ ]\n    """\n    @property\n    def day(self) -> datetime.date:\n        date = datetime.datetime.strptime(self.data["day"], DAY_MASK)\n        return date.date()\n\n    @property\n    def done(self) -> bool:\n        return self.data["done"]\n\n    @done.setter\n    def done(self, value: bool) -> None:\n        self.data["done"] = value\n\n@dataclass\nclass DictHabit(Habit[DictRecord], DictStorage):\n    @property\n    def id(self) -> str:\n        if "id" not in self.data:\n            self.data["id"] = generate_short_hash(self.name)\n        return self.data["id"]\n\n    @id.setter\n    def id(self, value: str) -> None:\n        self.data["id"] = value\n\n    @property\n    def name(self) -> str:\n        return self.data["name"]\n\n    @name.setter\n    def name(self, value: str) -> None:\n        self.data["name"] = value\n\n    @property\n    def star(self) -> int:\n        return self.data.get("star", 0)\n\n    @star.setter\n    def star(self, value: int) -> None:\n        self.data["star"] = value\n\n    @property\n    def records(self) -> List[DictRecord]:\n        return [DictRecord(d) for d in self.data["records"]]\n\n    async def tick(self, day: datetime.date, done: bool) -> None:\n        if record := next((r for r in self.records if r.day == day), None):\n            record.done = done\n        else:\n            data = {"day": day.strftime(DAY_MASK), "done": done}\n            self.data["records"].append(data)\n\n    async def merge(self, other: 'DictHabit') -> 'DictHabit':\n        records_set = {r.day: r for r in self.records}\n        for record in other.records:\n            records_set[record.day] = record\n        self.data["records"] = [r.data for r in records_set.values()]\n        return self\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, DictHabit):\n            return NotImplemented\n        return self.id == other.id\n\n    def __hash__(self) -> int:\n        return hash(self.id)\n\n@dataclass\nclass DictHabitList(HabitList[DictHabit], DictStorage):\n    """\n    # Read (d1~d3)\n    persistent    ->     memory      ->     view\n    d0: [x]              d0: [x]\n                                            d1: [ ]\n    d2: [x]              d2: [x]            d2: [x]\n                                            d3: [ ]\n    # Update:\n    view(update)  ->     memory      ->     persistent\n    d1: [ ]\n    d2: [ ]              d2: [ ]            d2: [x]\n    d3: [x]              d3: [x]            d3: [ ]\n    """\n    @property\n    def habits(self) -> List[DictHabit]:\n        habits = [DictHabit(d) for d in self.data["habits"]]\n        habits.sort(key=lambda x: x.star, reverse=True)\n        return habits\n\n    async def get_habit_by(self, habit_id: str) -> Optional[DictHabit]:\n        for habit in self.habits:\n            if habit.id == habit_id:\n                return habit\n        return None\n\n    async def add(self, name: str) -> None:\n        d = {"name": name, "records": [], "id": generate_short_hash(name)}\n        self.data["habits"].append(d)\n\n    async def remove(self, item: DictHabit) -> None:\n        self.data["habits"] = [h.data for h in self.habits if h != item]\n\n@dataclass\nclass DictSessionStorage(SessionStorage[DictHabitList], DictStorage):\n    def get_user_habit_list(self) -> Optional[DictHabitList]:\n        if "user_habit_list" in self.data:\n            return DictHabitList(self.data["user_habit_list"])\n        return None\n\n    def save_user_habit_list(self, habit_list: DictHabitList) -> None:\n        self.data["user_habit_list"] = habit_list.data\n\n@dataclass\nclass DictUserStorage(UserStorage[DictHabitList], DictStorage):\n    async def get_user_habit_list(self, user: User) -> Optional[DictHabitList]:\n        user_id = str(user.id)\n        if user_id in self.data:\n            return DictHabitList(self.data[user_id])\n        return None\n\n    async def save_user_habit_list(self, user: User, habit_list: DictHabitList) -> None:\n        user_id = str(user.id)\n        self.data[user_id] = habit_list.data\n\n    async def merge_user_habit_list(self, user: User, other: DictHabitList) -> DictHabitList:\n        user_id = str(user.id)\n        if user_id in self.data:\n            user_habit_list = DictHabitList(self.data[user_id])\n            for habit in other.habits:\n                existing_habit = next((h for h in user_habit_list.habits if h.id == habit.id), None)\n                if existing_habit:\n                    await existing_habit.merge(habit)\n                else:\n                    user_habit_list.data["habits"].append(habit.data)\n            self.data[user_id] = user_habit_list.data\n        else:\n            self.data[user_id] = other.data\n        return DictHabitList(self.data[user_id])\n