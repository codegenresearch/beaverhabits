import datetime\nfrom dataclasses import dataclass, field\nfrom typing import Optional\nfrom pydantic import BaseModel, validator\nfrom beaverhabits.storage.storage import CheckedRecord, Habit, HabitList\nfrom beaverhabits.utils import generate_short_hash\n\nDAY_MASK = "%Y-%m-%d"\n\n@dataclass(init=False)\nclass DictStorage:\n    data: dict = field(default_factory=dict, metadata={"exclude": True})\n\n@dataclass\nclass DictRecord(CheckedRecord, DictStorage):\n    @property\n    def day(self) -> datetime.date:\n        return datetime.datetime.strptime(self.data["day"], DAY_MASK).date()\n\n    @property\n    def done(self) -> bool:\n        return self.data["done"]\n\n    @done.setter\n    def done(self, value: bool) -> None:\n        self.data["done"] = value\n\n@dataclass\nclass HabitAddCard(BaseModel):\n    id: str = field(default_factory=lambda: generate_short_hash())\n    name: str\n    star: bool = False\n    records: list[DictRecord] = field(default_factory=list)\n\n    @validator('name')\n    def name_must_be_valid(cls, v):\n        if not v:\n            raise ValueError('Name cannot be empty')\n        return v\n\n    @property\n    def ticked_days(self) -> list[datetime.date]:\n        return [r.day for r in self.records if r.done]\n\n    async def tick(self, day: datetime.date, done: bool) -> None:\n        if record := next((r for r in self.records if r.day == day), None):\n            record.done = done\n        else:\n            self.records.append(DictRecord(data={"day": day.strftime(DAY_MASK), "done": done}))\n\n@dataclass\nclass DictHabitList(HabitList[HabitAddCard], DictStorage):\n    @property\n    def habits(self) -> list[HabitAddCard]:\n        return [HabitAddCard(**d) for d in self.data.get("habits", [])]\n\n    async def get_habit_by(self, habit_id: str) -> Optional[HabitAddCard]:\n        return next((h for h in self.habits if h.id == habit_id), None)\n\n    async def add(self, name: str) -> None:\n        self.data.setdefault("habits", []).append(HabitAddCard(name=name).dict())\n\n    async def remove(self, item: HabitAddCard) -> None:\n        self.data["habits"] = [h for h in self.habits if h.id != item.id]\n