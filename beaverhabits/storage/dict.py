import datetime\nfrom dataclasses import dataclass, field\nfrom typing import Optional, List\nfrom beaverhabits.storage.storage import CheckedRecord, Habit, HabitList\nfrom beaverhabits.utils import generate_short_hash\n\nDAY_MASK = "%Y-%m-%d"\nMONTH_MASK = "%Y/%m"\n\n@dataclass(init=False)\nclass DictStorage:\n    \""\n    Base class for storage using a dictionary.\n    \""\n    data: dict = field(default_factory=dict, metadata={"exclude": True})\n\n@dataclass\nclass DictRecord(CheckedRecord, DictStorage):\n    \""\n    Represents a record of a habit check, stored in a dictionary.\n    \""\n\n    @property\n    def day(self) -> datetime.date:\n        \""\n        Get the day of the record.\n        \""\n        return datetime.datetime.strptime(self.data.get("day", ""), DAY_MASK).date()\n\n    @property\n    def done(self) -> bool:\n        \""\n        Get the completion status of the record.\n        \""\n        return self.data.get("done", False)\n\n    @done.setter\n    def done(self, value: bool) -> None:\n        \""\n        Set the completion status of the record.\n        \""\n        self.data["done"] = value\n\n@dataclass\nclass DictHabit(Habit[DictRecord], DictStorage):\n    \""\n    Represents a habit with a list of records, stored in a dictionary.\n    \""\n\n    @property\n    def id(self) -> str:\n        \""\n        Get the unique identifier of the habit.\n        \""\n        if "id" not in self.data:\n            self.data["id"] = generate_short_hash(self.name)\n        return self.data["id"]\n\n    @property\n    def name(self) -> str:\n        \""\n        Get the name of the habit.\n        \""\n        return self.data.get("name", "")\n\n    @name.setter\n    def name(self, value: str) -> None:\n        \""\n        Set the name of the habit.\n        \""\n        self.data["name"] = value\n\n    @property\n    def star(self) -> bool:\n        \""\n        Get the star status of the habit.\n        \""\n        return self.data.get("star", False)\n\n    @star.setter\n    def star(self, value: bool) -> None:\n        \""\n        Set the star status of the habit.\n        \""\n        self.data["star"] = value\n\n    @property\n    def records(self) -> List[DictRecord]:\n        \""\n        Get the list of records for the habit.\n        \""\n        return [DictRecord(d) for d in self.data.get("records", [])]\n\n    async def tick(self, day: datetime.date, done: bool) -> bool:\n        \""\n        Mark a day as done or not done for this habit.\n        :param day: The day to mark.\n        :param done: Whether the day is done.\n        :return: True if the operation was successful, False otherwise.\n        \""\n        record = next((r for r in self.records if r.day == day), None)\n        if record:\n            record.done = done\n            return True\n        else:\n            self.data.setdefault("records", []).append({"day": day.strftime(DAY_MASK), "done": done})\n            return True\n\n    async def merge(self, other: 'DictHabit') -> None:\n        \""\n        Merge another habit's records into this habit.\n        :param other: The other habit to merge.\n        \""\n        for record in other.records:\n            if not any(r.day == record.day for r in self.records):\n                self.data.setdefault("records", []).append(record.data)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, DictHabit):\n            return NotImplemented\n        return self.id == other.id\n\n    def __hash__(self) -> int:\n        return hash(self.id)\n\n@dataclass\nclass DictHabitList(HabitList[DictHabit], DictStorage):\n    \""\n    Represents a list of habits, stored in a dictionary.\n    \""\n\n    @property\n    def habits(self) -> List[DictHabit]:\n        \""\n        Get the list of habits, sorted by star status.\n        \""\n        habits = [DictHabit(d) for d in self.data.get("habits", [])]\n        habits.sort(key=lambda x: x.star, reverse=True)\n        return habits\n\n    async def get_habit_by(self, habit_id: str) -> Optional[DictHabit]:\n        \""\n        Get a habit by its unique identifier.\n        :param habit_id: The unique identifier of the habit.\n        :return: The habit if found, None otherwise.\n        \""\n        for habit in self.habits:\n            if habit.id == habit_id:\n                return habit\n\n    async def add(self, name: str) -> bool:\n        \""\n        Add a new habit to the list.\n        :param name: The name of the new habit.\n        :return: True if the habit was added, False if a habit with the same name already exists.\n        \""\n        if any(habit.name == name for habit in self.habits):\n            return False\n        d = {"name": name, "records": [], "id": generate_short_hash(name)}\n        self.data.setdefault("habits", []).append(d)\n        return True\n\n    async def remove(self, item: DictHabit) -> bool:\n        \""\n        Remove a habit from the list.\n        :param item: The habit to remove.\n        :return: True if the habit was removed, False if the habit was not found.\n        \""\n        for habit in self.habits:\n            if habit == item:\n                self.data["habits"].remove(habit.data)\n                return True\n        return False\n\n    async def merge_user_habit_list(self, other: 'DictHabitList') -> None:\n        \""\n        Merge another habit list into this habit list.\n        :param other: The other habit list to merge.\n        \""\n        for habit in other.habits:\n            existing_habit = next((h for h in self.habits if h.id == habit.id), None)\n            if existing_habit:\n                await existing_habit.merge(habit)\n            else:\n                self.data.setdefault("habits", []).append(habit.data)\n