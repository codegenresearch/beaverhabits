import datetime\nfrom dataclasses import dataclass, field\nfrom typing import Optional, List\nfrom beaverhabits.storage.storage import CheckedRecord, Habit, HabitList\nfrom beaverhabits.utils import generate_short_hash\n\nDAY_MASK = "%Y-%m-%d"\nMONTH_MASK = "%Y/%m"\n\n@dataclass(init=False)\nclass DictStorage:\n    data: dict = field(default_factory=dict, metadata={"exclude": True})\n\n@dataclass\nclass DictRecord(CheckedRecord, DictStorage):\n    """\n    Represents a record of a habit check for a specific day.\n    \n    Example:\n    persistent    ->     memory      ->     view\n    d0: [x]              d0: [x]\n                                            d1: [ ]\n    d2: [x]              d2: [x]            d2: [x]\n                                            d3: [ ]\n    \n    Update:\n    view(update)  ->     memory      ->     persistent\n    d1: [ ]\n    d2: [ ]              d2: [ ]            d2: [x]\n    d3: [x]              d3: [x]            d3: [ ]\n    """\n    @property\n    def day(self) -> datetime.date:\n        parsed_date = datetime.datetime.strptime(self.data["day"], DAY_MASK)\n        return parsed_date.date()\n\n    @property\n    def done(self) -> bool:\n        return self.data["done"]\n\n    @done.setter\n    def done(self, value: bool) -> None:\n        self.data["done"] = value\n\n@dataclass\nclass DictHabit(Habit[DictRecord], DictStorage):\n    @property\n    def id(self) -> str:\n        if "id" not in self.data:\n            self.data["id"] = generate_short_hash(self.name)\n        return self.data["id"]\n\n    @id.setter\n    def id(self, value: str) -> None:\n        self.data["id"] = value\n\n    @property\n    def name(self) -> str:\n        return self.data["name"]\n\n    @name.setter\n    def name(self, value: str) -> None:\n        self.data["name"] = value\n\n    @property\n    def star(self) -> bool:\n        return self.data.get("star", False)\n\n    @star.setter\n    def star(self, value: int) -> None:\n        self.data["star"] = bool(value)\n\n    @property\n    def records(self) -> list[DictRecord]:\n        return [DictRecord(d) for d in self.data["records"]]\n\n    async def tick(self, day: datetime.date, done: bool) -> None:\n        if record := next((r for r in self.records if r.day == day), None):\n            record.done = done\n        else:\n            data = {"day": day.strftime(DAY_MASK), "done": done}\n            self.data["records"].append(data)\n\n    async def merge(self, other: 'DictHabit') -> 'DictHabit':\n        records_set = {r.day: r.done for r in self.records}\n        for record in other.records:\n            records_set[record.day] = records_set.get(record.day, False) or record.done\n        self.data["records"] = [{"day": day.strftime(DAY_MASK), "done": done} for day, done in records_set.items()]\n        return self\n\n    def __eq__(self, other: object) -> bool:\n        return isinstance(other, DictHabit) and self.id == other.id\n\n    def __hash__(self) -> int:\n        return hash(self.id)\n\n@dataclass\nclass DictHabitList(HabitList[DictHabit], DictStorage):\n    """\n    Manages a list of habits with methods to add, remove, get, and merge habits.\n    \n    Example:\n    persistent    ->     memory      ->     view\n    d0: [x]              d0: [x]\n                                            d1: [ ]\n    d2: [x]              d2: [x]            d2: [x]\n                                            d3: [ ]\n    \n    Update:\n    view(update)  ->     memory      ->     persistent\n    d1: [ ]\n    d2: [ ]              d2: [ ]            d2: [x]\n    d3: [x]              d3: [x]            d3: [ ]\n    """\n    @property\n    def habits(self) -> list[DictHabit]:\n        habits = [DictHabit(d) for d in self.data["habits"]]\n        habits.sort(key=lambda x: x.star, reverse=True)\n        return habits\n\n    async def get_habit_by(self, habit_id: str) -> Optional[DictHabit]:\n        for habit in self.habits:\n            if habit.id == habit_id:\n                return habit\n\n    async def add(self, name: str) -> None:\n        d = {"name": name, "records": [], "id": generate_short_hash(name)}\n        self.data["habits"].append(d)\n\n    async def remove(self, item: DictHabit) -> None:\n        self.data["habits"].remove(item.data)\n\n    async def merge(self, other: 'DictHabitList') -> 'DictHabitList':\n        habit_ids = {h.id for h in self.habits}\n        other_habits = {h.id: h for h in other.habits}\n        for habit_id in other_habits:\n            if habit_id in habit_ids:\n                await self.get_habit_by(habit_id).merge(other_habits[habit_id])\n            else:\n                self.data["habits"].append(other_habits[habit_id].data)\n        return self\n