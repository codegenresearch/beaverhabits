import datetime\nfrom dataclasses import dataclass, field\nfrom typing import Optional\n\nfrom beaverhabits.storage.storage import CheckedRecord, Habit, HabitList\nfrom beaverhabits.utils import generate_short_hash\n\nDAY_MASK = "%Y-%m-%d"\n\n@dataclass(init=False)\nclass DictStorage:\n    data: dict = field(default_factory=dict, metadata={"exclude": True})\n\n@dataclass\nclass DictRecord(CheckedRecord, DictStorage):\n    """\n    Represents a record of a habit check.\n    """\n\n    @property\n    def day(self) -> datetime.date:\n        return datetime.datetime.strptime(self.data["day"], DAY_MASK).date()\n\n    @property\n    def done(self) -> bool:\n        return self.data["done"]\n\n    @done.setter\n    def done(self, value: bool) -> None:\n        self.data["done"] = value\n\n@dataclass\nclass DictHabit(Habit[DictRecord], DictStorage):\n    """\n    Represents a habit with a list of records.\n    """\n\n    @property\n    def id(self) -> str:\n        if "id" not in self.data:\n            self.data["id"] = generate_short_hash(self.name)\n        return self.data["id"]\n\n    @id.setter\n    def id(self, value: str) -> None:\n        self.data["id"] = value\n\n    @property\n    def name(self) -> str:\n        return self.data["name"]\n\n    @name.setter\n    def name(self, value: str) -> None:\n        self.data["name"] = value\n\n    @property\n    def star(self) -> bool:\n        return self.data.get("star", False)\n\n    @star.setter\n    def star(self, value: bool) -> None:\n        self.data["star"] = value\n\n    @property\n    def records(self) -> list[DictRecord]:\n        return [DictRecord(d) for d in self.data.get("records", [])]\n\n    async def tick(self, day: datetime.date, done: bool) -> None:\n        record = next((r for r in self.records if r.day == day), None)\n        if record:\n            record.done = done\n        else:\n            self.data.setdefault("records", []).append({"day": day.strftime(DAY_MASK), "done": done})\n\n    def __str__(self) -> str:\n        return f"{self.id}: {self.name}"\n\n    def __eq__(self, other: object) -> bool:\n        return isinstance(other, DictHabit) and self.id == other.id\n\n    def __hash__(self) -> int:\n        return hash(self.id)\n\n@dataclass\nclass DictHabitList(HabitList[DictHabit], DictStorage):\n    """\n    Represents a list of habits.\n    """\n\n    @property\n    def habits(self) -> list[DictHabit]:\n        return [DictHabit(d) for d in self.data.get("habits", [])]\n\n    @property\n    def order(self) -> list[str]:\n        return [h.id for h in self.habits]\n\n    @order.setter\n    def order(self, value: list[str]) -> None:\n        habit_map = {h.id: h for h in self.habits}\n        self.data["habits"] = [habit_map[id].data for id in value if id in habit_map]\n\n    async def get_habit_by(self, habit_id: str) -> Optional[DictHabit]:\n        return next((h for h in self.habits if h.id == habit_id), None)\n\n    async def add(self, name: str) -> None:\n        if not name.strip():\n            raise ValueError("Habit name cannot be empty or whitespace.")\n        self.data.setdefault("habits", []).append({"name": name, "records": [], "id": generate_short_hash(name)})\n\n    async def remove(self, item: DictHabit) -> None:\n        self.data["habits"] = [h.data for h in self.habits if h != item]\n\n    async def merge(self, other: "DictHabitList") -> "DictHabitList":\n        result = set(self.habits).symmetric_difference(set(other.habits))\n        for self_habit in self.habits:\n            for other_habit in other.habits:\n                if self_habit == other_habit:\n                    new_habit = await self_habit.merge(other_habit)\n                    result.add(new_habit)\n        return DictHabitList({"habits": [h.data for h in result]})\n