from pathlib import Path\nfrom typing import Optional, Dict, Any\nfrom nicegui.storage import PersistentDict\nfrom beaverhabits.app.db import User\nfrom beaverhabits.configs import USER_DATA_FOLDER\nfrom beaverhabits.storage.dict import DictHabitList\nfrom beaverhabits.storage.storage import UserStorage\nfrom beaverhabits.storage.storage import TaskStatus\nfrom beaverhabits.storage.storage import merge_habit_lists\n\nKEY_NAME = "data"\n\nclass UserDiskStorage(UserStorage[DictHabitList]):\n    async def get_user_dict_storage(self, user: User) -> Optional[DictHabitList]:\n        d = self._get_persistent_dict(user).get(KEY_NAME)\n        if not d:\n            return None\n        return DictHabitList(d)\n    \\n    async def save_user_dict_storage(self, user: User, habit_list: DictHabitList) -> TaskStatus:\n        current_habit_list = await self.get_user_dict_storage(user)\n        if current_habit_list is None:\n            return await self._save_new_habit_list(user, habit_list)\n        \\(merged_habit_list, status) = merge_habit_lists(current_habit_list, habit_list)\n        if status == TaskStatus.SUCCESS:\n            return await self._save_new_habit_list(user, merged_habit_list)\n        return status\n    \\(\\n    async def _save_new_habit_list(self, user: User, habit_list: DictHabitList) -> TaskStatus:\n        try:\n            d = self._get_persistent_dict(user)\n            d[KEY_NAME] = habit_list.data\n            return TaskStatus.SUCCESS\\(\\n        except Exception as e:\n            print(f"Error saving habit list: {e}")\\(\\n            return TaskStatus.FAILURE\\(\\n    \\(\\n    def _get_persistent_dict(self, user: User) -> PersistentDict:\n        path = Path(f"{USER_DATA_FOLDER}/{str(user.email)}.json")\\(\\n        return PersistentDict(path, encoding="utf-8")