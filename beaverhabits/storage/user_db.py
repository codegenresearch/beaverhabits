from typing import Optional, Dict, Any\nfrom nicegui import background_tasks, core\nfrom nicegui.storage import observables\nfrom beaverhabits.app import crud\nfrom beaverhabits.app.db import User\nfrom beaverhabits.storage.dict import DictHabitList\nfrom beaverhabits.storage.storage import UserStorage\nclass DatabasePersistentDict(observables.ObservableDict):\n    def __init__(self, user: User, data: Dict[str, Any]) -> None:\n        self.user = user\n        super().__init__(data, on_change=self.backup)\n    def backup(self) -> None:\n        async def backup():\n            await crud.update_user_habit_list(self.user, self)\n        if core.loop:\n            background_tasks.create_lazy(backup(), name=self.user.email)\n        else:\n            core.app.on_startup(backup())\nclass UserDatabaseStorage(UserStorage[DictHabitList]):\n    async def get_user_habit_list(self, user: User) -> Optional[DictHabitList]:\n        user_habit_list = await crud.get_user_habit_list(user)\n        if user_habit_list is None:\n            return None\n        d = DatabasePersistentDict(user, user_habit_list.data)\n        return DictHabitList(d)\n    async def update_user_habit_list(self, user: User, habit_list: DictHabitList) -> None:\n        await crud.update_user_habit_list(user, habit_list.data)\n    async def merge_user_habit_list(self, user: User, other: DictHabitList) -> DictHabitList:\n        current = await self.get_user_habit_list(user)\n        if current is None:\n            return other\n        merged = await current.merge(other)\n        await self.update_user_habit_list(user, merged)\n        return merged