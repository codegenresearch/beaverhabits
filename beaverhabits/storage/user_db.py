from typing import Optional, Dict, Any\n\nfrom nicegui import background_tasks, core\nfrom nicegui.storage import observables\nimport logging\n\nfrom beaverhabits.app import crud\nfrom beaverhabits.app.db import User\nfrom beaverhabits.storage.dict import DictHabitList\nfrom beaverhabits.storage.storage import UserStorage\n\n\nlogging.basicConfig(level=logging.INFO)\n\n\nclass DatabasePersistentDict(observables.ObservableDict):\n\n    def __init__(self, user: User, data: Dict[str, Any]) -> None:\n        self.user = user\n        super().__init__(data, on_change=self.backup)\n\n    async def backup(self) -> None:\n        try:\n            await crud.update_user_habit_list(self.user, self)\n            logging.info(f"Backup successful for user: {self.user.email}")\n        except Exception as e:\n            logging.error(f"Failed to backup for user: {self.user.email}, error: {e}")\n\n\nclass UserDatabaseStorage(UserStorage[DictHabitList]):\n    async def get_user_habit_list(self, user: User) -> Optional[DictHabitList]:\n        try:\n            user_habit_list = await crud.get_user_habit_list(user)\n            if user_habit_list is None:\n                return None\n\n            d = DatabasePersistentDict(user, user_habit_list.data)\n            return DictHabitList(d)\n        except Exception as e:\n            logging.error(f"Failed to get user habit list for user: {user.email}, error: {e}")\n            return None\n\n    async def save_user_habit_list(self, user: User, habit_list: DictHabitList) -> None:\n        try:\n            await crud.update_user_habit_list(user, habit_list.data)\n            logging.info(f"User habit list saved successfully for user: {user.email}")\n        except Exception as e:\n            logging.error(f"Failed to save user habit list for user: {user.email}, error: {e}")\n\n    async def merge_user_habit_list(self, user: User, other: DictHabitList) -> DictHabitList:\n        current = await self.get_user_habit_list(user)\n        if current is None:\n            return other\n\n        # Enhanced merging logic\n        merged_data = {**current.data, **other.data}\n        merged_habit_list = DictHabitList(merged_data)\n        await self.save_user_habit_list(user, merged_habit_list)\n        return merged_habit_list\n