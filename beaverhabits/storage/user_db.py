from typing import Optional, Dict, Any, cast\nimport logging\nfrom nicegui import background_tasks, core\nfrom nicegui.storage import observables\nfrom beaverhabits.app import crud\nfrom beaverhabits.app.db import User\nfrom beaverhabits.storage.dict import DictHabitList\nfrom beaverhabits.storage.storage import UserStorage\n\nlogging.basicConfig(level=logging.INFO)\n\nclass DatabasePersistentDict(observables.ObservableDict):\n    def __init__(self, user: User, data: dict) -> None:\n        self.user = user\n        super().__init__(data, on_change=self.backup)\n    \\n    def backup(self) -> None:\\n        async def backup_task() -> None:\\\\n            try:\\\\\\\n                await crud.update_user_habit_list(self.user, self)\\\\\\\\\n                logging.info(f"Backup successful for user: {self.user.email}")\\\\\\\\\n            except Exception as e:\\\\\\\n                logging.error(f"Failed to backup for user: {self.user.email}, error: {e}")\\\\\\\\\n        \\\\n        if core.loop:\\\\\\n            background_tasks.create_lazy(backup_task(), name=self.user.email)\\\\\\\\\n        else:\\\\\\n            core.app.on_startup(backup_task())\\\\\\\\\n\nclass UserDatabaseStorage(UserStorage[DictHabitList]):\\n    async def get_user_habit_list(self, user: User) -> Optional[DictHabitList]:\\\\\\n        try:\\\\\\\\\\n            user_habit_list = await crud.get_user_habit_list(user)\\\\\\\\\\\n            if user_habit_list is None:\\\\\\\\\\n                return None\\\\\\\\\\\n\\\\\\\\\\\n            d = DatabasePersistentDict(user, user_habit_list.data)\\\\\\\\\\\n            return DictHabitList(d)\\\\\\\\\\\n        except Exception as e:\\\\\\\\\\n            logging.error(f"Failed to get user habit list for user: {user.email}, error: {e}")\\\\\\\\\\\n            return None\\\\\\\\\\\n\\\\n    async def save_user_habit_list(self, user: User, habit_list: DictHabitList) -> None:\\\\\\\\\\n        try:\\\\\\\\\\n            await crud.update_user_habit_list(user, habit_list.data)\\\\\\\\\\\n            logging.info(f"User habit list saved successfully for user: {user.email}")\\\\\\\\\\\n        except Exception as e:\\\\\\\\\\n            logging.error(f"Failed to save user habit list for user: {user.email}, error: {e}")\\\\\\\\\\\n\\\\n    async def merge_user_habit_list(self, user: User, other: DictHabitList) -> DictHabitList:\\\\\\\\\\n        current = await self.get_user_habit_list(user)\\\\\\\\\\\n        if current is None:\\\\\\\\\\n            return other\\\\\\\\\\\n\\\\\\\\\\\n        merged_habit_list = await current.merge(other)\\\\\\\\\\\n        await self.save_user_habit_list(user, merged_habit_list)\\\\\\\\\\\n        return merged_habit_list\\\\\\\\\\