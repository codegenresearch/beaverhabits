from typing import Optional, Any, Dict\nfrom nicegui import background_tasks, core\nfrom nicegui.storage import observables\nfrom beaverhabits.app import crud\nfrom beaverhabits.app.db import User\nfrom beaverhabits.storage.dict import DictHabitList\nfrom beaverhabits.storage.storage import UserStorage\n\nclass DatabasePersistentDict(observables.ObservableDict):\n    def __init__(self, user: User, data: dict) -> None:\n        self.user = user\n        super().__init__(data, on_change=self.backup)\n\n    def backup(self) -> None:\n        async def backup_task() -> None:\n            await crud.update_user_habit_list(self.user, self)\n\n        if core.loop:\n            background_tasks.create_lazy(backup_task(), name=self.user.email)\n        else:\n            core.app.on_startup(backup_task)\n\nclass UserDatabaseStorage(UserStorage[DictHabitList]):\n    async def get_user_habit_list(self, user: User) -> Optional[DictHabitList]:\n        habit_list = await crud.get_user_habit_list(user)\n        if habit_list is None:\n            return None\n        db_dict = DatabasePersistentDict(user, habit_list.data)\n        return DictHabitList(db_dict)\n\n    async def save_user_habit_list(self, user: User, habit_list: DictHabitList) -> None:\n        await crud.update_user_habit_list(user, habit_list.data)\n\n    async def merge_user_habit_lists(self, user: User, additional_habit_list: DictHabitList) -> DictHabitList:\n        current_habit_list = await self.get_user_habit_list(user)\n        if current_habit_list is None:\n            return additional_habit_list\n        merged_habit_list = await current_habit_list.merge(additional_habit_list)\n        await self.save_user_habit_list(user, merged_habit_list)\n        return merged_habit_list\n