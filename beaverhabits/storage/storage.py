import datetime\nfrom typing import List, Optional, Protocol, TypeVar, Generic, Dict, Any\nfrom beaverhabits.app.db import User\nfrom beaverhabits.utils import generate_short_hash\nfrom pydantic import BaseModel\nfrom fastapi import FastAPI, HTTPException, Request\nfrom fastapi.responses import HTMLResponse, JSONResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.templating import Jinja2Templates\nfrom starlette.middleware.cors import CORSMiddleware\nfrom fastapi_dragdrop import DragDropRouter, DragDropItem\n\napp = FastAPI()\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\napp.mount("/static", StaticFiles(directory="static"), name="static")\ntemplates = Jinja2Templates(directory="templates")\n\R = TypeVar('R', bound='CheckedRecord')"H = TypeVar('H', bound='Habit')"L = TypeVar('L', bound='HabitList')\n\nclass CheckedRecord(Protocol):\n    @property\n    def day(self) -> datetime.date: ...\n    @property\n    def done(self) -> bool: ...\n    @done.setter\n    def done(self, value: bool) -> None: ...\n    def __str__(self):\n        return f"{self.day} {'[x]' if self.done else '[ ]'}"\n    __repr__ = __str__\n\nclass Habit(Protocol, Generic[R]):\n    @property\n    def id(self) -> str | int: ...\n    @property\n    def name(self) -> str: ...\n    @name.setter\n    def name(self, value: str) -> None: ...\n    @property\n    def star(self) -> bool: ...\n    @star.setter\n    def star(self, value: bool) -> None: ...\n    @property\n    def records(self) -> List[R]: ...\n    @property\n    def ticked_days(self) -> list[datetime.date]:\n        return [r.day for r in self.records if r.done]\n    async def tick(self, day: datetime.date, done: bool) -> None: ...\n    def __str__(self):\n        return self.name\n    __repr__ = __str__\n\nclass HabitList(Protocol, Generic[H]):\n    @property\n    def habits(self) -> List[H]: ...\n    @property\n    def order(self) -> List[str]: ...\n    @order.setter\n    def order(self, value: List[str]) -> None: ...\n    async def add(self, name: str) -> None: ...\n    async def remove(self, item: H) -> None: ...\n    async def get_habit_by(self, habit_id: str) -> Optional[H]: ...\n    async def merge(self, other: 'HabitList') -> 'HabitList': ...\n    def __str__(self):\n        return f"HabitList({len(self.habits)} habits)"\n    __repr__ = __str__\n\nclass SessionStorage(Protocol, Generic[L]):\n    def get_user_habit_list(self) -> Optional[L]: ...\n    def save_user_habit_list(self, habit_list: L) -> None: ...\n\nclass UserStorage(Protocol, Generic[L]):\n    async def get_user_habit_list(self, user: User) -> Optional[L]: ...\n    async def save_user_habit_list(self, user: User, habit_list: L) -> None: ...\n    async def merge_user_habit_list(self, user: User, other: L) -> L: ...\n\n# Drag and Drop functionality\ndragdrop_router = DragDropRouter()\n">@dragdrop_router.on_drop\nasync def handle_drop(item: DragDropItem, request: Request):\n    user_habit_list = await get_user_habit_list(request)\n    if not user_habit_list:\n        raise HTTPException(status_code=404, detail="User habit list not found")\n    user_habit_list.order = [item.id for item in item.items]\n    await save_user_habit_list(request, user_habit_list)\n    return JSONResponse(content={"status": "success"})\n\napp.include_router(dragdrop_router)\n\n# Example routes">@app.get("/", response_class=HTMLResponse)\nasync def read_root(request: Request):\n    return templates.TemplateResponse("index.html", {"request": request})\n">@app.get("/habits", response_model=HabitList)\nasync def get_habits(request: Request):\n    user_habit_list = await get_user_habit_list(request)\n    if not user_habit_list:\n        raise HTTPException(status_code=404, detail="User habit list not found")\n    return user_habit_list\n">@app.post("/habits", response_model=HabitList)\nasync def add_habit(request: Request, name: str):\n    user_habit_list = await get_user_habit_list(request)\n    if not user_habit_list:\n        user_habit_list = HabitList()\n    await user_habit_list.add(name)\n    await save_user_habit_list(request, user_habit_list)\n    return user_habit_list\n">@app.delete("/habits/{habit_id}", response_model=HabitList)\nasync def remove_habit(request: Request, habit_id: str):\n    user_habit_list = await get_user_habit_list(request)\n    if not user_habit_list:\n        raise HTTPException(status_code=404, detail="User habit list not found")\n    habit = await user_habit_list.get_habit_by(habit_id)\n    if not habit:\n        raise HTTPException(status_code=404, detail="Habit not found")\n    await user_habit_list.remove(habit)\n    await save_user_habit_list(request, user_habit_list)\n    return user_habit_list\n"># Mock implementations for session storage\nasync def get_user_habit_list(request: Request) -> Optional[HabitList]:\n    return request.session.get("user_habit_list")\n\nasync def save_user_habit_list(request: Request, habit_list: HabitList) -> None:\n    request.session["user_habit_list"] = habit_list