import datetime\nfrom typing import List, Optional, Protocol, TypeVar\nfrom beaverhabits.app.schemas import CheckedRecord as CheckedRecordSchema, HabitRead\n\nR = TypeVar('R', bound='CheckedRecord')\nH = TypeVar('H', bound='Habit')\nL = TypeVar('L', bound='HabitList')\n\nclass CheckedRecord(CheckedRecordSchema, Protocol):\n    @property\n    def day(self) -> datetime.date: ...\n\n    @property\n    def done(self) -> bool: ...\n\n    @done.setter\n    def done(self, value: bool) -> None: ...\n\n    def __str__(self):\n        return f"{self.day} {'[x]' if self.done else '[ ]'}"\n\n    __repr__ = __str__\n\nclass Habit(HabitRead, Protocol):\n    @property\n    def id(self) -> str | int: ...\n\n    @property\n    def name(self) -> str: ...\n\n    @name.setter\n    def name(self, value: str) -> None: ...\n\n    @property\n    def records(self) -> List[R]: ...\n\n    @property\n    def ticked_days(self) -> list[datetime.date]:\n        return [r.day for r in self.records if r.done]\n\n    async def tick(self, day: datetime.date, done: bool) -> None: ...\n\n    def __str__(self):\n        return self.name\n\n    __repr__ = __str__\n\nclass HabitList(Protocol):\n\n    @property\n    def habits(self) -> List[H]: ...\n\n    async def add(self, name: str) -> None: ...\n\n    async def remove(self, item: H) -> None: ...\n\n    async def get_habit_by(self, habit_id: str) -> Optional[H]: ...\n\nclass SessionStorage(Protocol):\n    def get_user_habit_list(self) -> Optional[HabitList]: ...\n\n    def save_user_habit_list(self, habit_list: HabitList) -> None: ...\n\nclass UserStorage(Protocol):\n    async def get_user_habit_list(self, user: User) -> Optional[HabitList]: ...\n\n    async def save_user_habit_list(self, user: User, habit_list: HabitList) -> None: ...\n