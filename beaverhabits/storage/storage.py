import datetime\nfrom typing import List, Optional, Protocol\n\nclass CheckedRecord(Protocol):\n    @property\n    def day(self) -> datetime.date: ...\n\n    @property\n    def done(self) -> bool: ...\n\n    @done.setter\n    def done(self, value: bool) -> None: ...\n\n    def __str__(self) -> str:\n        return f\"{self.day} {'[x]' if self.done else '[ ]'}\"\n\n    def __repr__(self) -> str:\n        return f\"CheckedRecord(day={self.day}, done={self.done})\"\n\nclass Habit[R: CheckedRecord](Protocol):\n    @property\n    def id(self) -> str: ...\n\n    @property\n    def name(self) -> str: ...\n\n    @name.setter\n    def name(self, value: str) -> None: ...\n\n    @property\n    def star(self) -> bool: ...\n\n    @star.setter\n    def star(self, value: bool) -> None: ...\n\n    @property\n    def records(self) -> List[R]: ...\n\n    @property\n    def ticked_days(self) -> List[datetime.date]:\n        return [r.day for r in self.records if r.done]\n\n    async def tick(self, day: datetime.date, done: bool) -> None: ...\n\n    def __str__(self) -> str:\n        return self.name\n\n    def __repr__(self) -> str:\n        return f\"Habit(id={self.id}, name={self.name}, star={self.star})\"\n\nclass HabitList[H: Habit](Protocol):\n\n    @property\n    def habits(self) -> List[H]: ...\n\n    async def add(self, name: str) -> None: ...\n\n    async def remove(self, item: H) -> None: ...\n\n    async def get_habit_by(self, habit_id: str) -> Optional[H]: ...\n\n    async def merge(self, other: 'HabitList[H]') -> 'HabitList[H]': ...\n\nclass SessionStorage[L: HabitList](Protocol):\n    def get_user_habit_list(self) -> Optional[L]: ...\n\n    def save_user_habit_list(self, habit_list: L) -> None: ...\n\nclass UserStorage[L: HabitList](Protocol):\n    async def get_user_habit_list(self, user: object) -> Optional[L]: ...\n\n    async def save_user_habit_list(self, user: object, habit_list: L) -> None: ...\n