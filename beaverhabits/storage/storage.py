import datetime import logging from typing import List, Optional, Protocol from beaverhabits.app.db import User class CheckedRecord(Protocol): \\ @property \\: def day(self) -> datetime.date: ... \\: @property \\: def done(self) -> bool: ... \\: @done.setter \\: def done(self, value: bool) -> None: ... \\: def __str__(self): \\\\ return f"{{self.day}} {'[x]' if self.done else '[ ]'}" \\: __repr__ = __str__ class Habit[R: CheckedRecord](Protocol): \\: @property \\: def id(self) -> str | int: ... \\: @property \\: def name(self) -> str: ... \\: @name.setter \\: def name(self, value: str) -> None: ... \\: @property \\: def star(self) -> bool: ... \\: @star.setter \\: def star(self, value: int) -> None: ... \\: @property \\: def records(self) -> List[R]: ... \\: @property \\: def ticked_days(self) -> list[datetime.date]: \\\\ return [r.day for r in self.records if r.done] \\: async def tick(self, day: datetime.date, done: bool) -> None: \\\\ logging.info(f"Ticking habit {{self.name}} for {{day}} to {{done}}") \\: def __str__(self): \\\\ return self.name \\: __repr__ = __str__ class HabitList[H: Habit](Protocol): \\: @property \\: def habits(self) -> List[H]: ... \\: async def add(self, name: str) -> None: \\\\ logging.info(f"Adding habit {{name}}") \\: async def remove(self, item: H) -> None: \\\\ logging.info(f"Removing habit {{item.name}}") \\: async def get_habit_by(self, habit_id: str) -> Optional[H]: \\\\ logging.info(f"Getting habit by ID {{habit_id}}") \\: async def merge(self, other: "HabitList[H]") -> "HabitList[H]": \\\\ logging.info(f"Merging habit lists") \\\\ result = set(self.habits).symmetric_difference(set(other.habits)) \\\\ for self_habit in self.habits: \\\\\\ for other_habit in other.habits: \\\\\\\\ if self_habit == other_habit: \\\\\\\\\\ new_habit = await self_habit.merge(other_habit) \\\\\\\\\\ result.add(new_habit) \\\\ return HabitList[H]({"habits": [h.data for h in result]}) class SessionStorage[L: HabitList](Protocol): \\: def get_user_habit_list(self) -> Optional[L]: ... \\: def save_user_habit_list(self, habit_list: L) -> None: ... class UserStorage[L: HabitList](Protocol): \\: async def get_user_habit_list(self, user: User) -> Optional[L]: \\\\ logging.info(f"Getting habit list for user {{user.id}}") \\: async def save_user_habit_list(self, user: User, habit_list: L) -> None: \\\\ logging.info(f"Saving habit list for user {{user.id}}")