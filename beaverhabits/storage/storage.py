import datetime\nimport logging\nfrom typing import Optional, Protocol, List\nfrom beaverhabits.app.db import User\n\nclass CheckedRecord(Protocol):\n    @property\n    def day(self) -> datetime.date: ...\n\n    @property\n    def done(self) -> bool: ...\n\n    @done.setter\n    def done(self, value: bool) -> None: ...\n\n    def __str__(self) -> str:\n        return f\"{self.day} {'[x]' if self.done else '[ ]'}\"\n\n    __repr__ = __str__\n\nclass Habit(Protocol):\n    R = CheckedRecord\n\n    @property\n    def id(self) -> str: ...\n\n    @property\n    def name(self) -> str: ...\n\n    @name.setter\n    def name(self, value: str) -> None: ...\n\n    @property\n    def star(self) -> bool: ...\n\n    @star.setter\n    def star(self, value: bool) -> None: ...\n\n    @property\n    def records(self) -> List[R]: ...\n\n    @property\n    def ticked_days(self) -> List[datetime.date]:\n        return [r.day for r in self.records if r.done]\n\n    async def tick(self, day: datetime.date, done: bool) -> None: ...\n\n    def __str__(self) -> str:\n        return self.name\n\n    __repr__ = __str__\n\nclass HabitList(Protocol):\n    H = Habit\n\n    @property\n    def habits(self) -> List[H]: ...\n\n    async def add(self, name: str) -> None: ...\n\n    async def remove(self, item: H) -> None: ...\n\n    async def get_habit_by(self, habit_id: str) -> Optional[H]: ...\n\n    async def merge(self, other: 'HabitList') -> 'HabitList': ...\n\n    def __str__(self) -> str:\n        return f\"HabitList(habits={self.habits})\"\n\n    __repr__ = __str__\n\nclass SessionStorage(Protocol):\n    L = HabitList\n\n    def get_user_habit_list(self) -> Optional[L]: ...\n\n    def save_user_habit_list(self, habit_list: L) -> None: ...\n\nclass UserStorage(Protocol):\n    L = HabitList\n\n    async def get_user_habit_list(self, user: User) -> Optional[L]: ...\n\n    async def save_user_habit_list(self, user: User, habit_list: L) -> None: ...\n\n    async def merge_user_habit_lists(self, user1: User, user2: User) -> Optional[L]: ...\n