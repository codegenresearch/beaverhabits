import json logging from nicegui import events, ui from beaverhabits.app.db import User from beaverhabits.frontend.components import menu_header from beaverhabits.storage.dict import DictHabitList from beaverhabits.storage.meta import get_root_path from beaverhabits.storage.storage import HabitList, merge_habit_lists from beaverhabits.views import user_storage logging.basicConfig(level=logging.INFO) def import_from_json(text: str) -> HabitList:     try:         data = json.loads(text)         habit_list = DictHabitList(data)         if not habit_list.habits:             raise ValueError("No habits found in the JSON file.")         return habit_list     except json.JSONDecodeError as e:         logging.error(f"Failed to decode JSON: {e}")         raise def display_import_confirmation_dialog(user: User, habits_count: int):     with ui.dialog() as dialog, ui.card().classes("w-64"):         ui.label(f"Are you sure? Importing this file will add {habits_count} new habits and merge any existing ones.")         with ui.row():             ui.button("Yes", on_click=lambda: dialog.submit("Yes"))             ui.button("No", on_click=lambda: dialog.submit("No"))     return dialog async def handle_file_upload(event: events.UploadEventArguments, user: User):     try:         file_content = event.content.read().decode("utf-8")         other = import_from_json(file_content)         current = await user_storage.get_user_habit_list(user)         if current:             merged, added_count, merged_count = merge_habit_lists(current, other)             logging.info(f"Added {added_count} new habits and merged {merged_count} existing habits.")         else:             merged = other             logging.info(f"Added {len(other.habits)} new habits.")         await user_storage.save_user_habit_list(user, merged)         ui.notify(             f"Successfully imported {len(other.habits)} habits.",             position="top",             color="positive",         )     except Exception as error:         ui.notify(f"Import failed: {str(error)}", color="negative", position="top")         logging.error(f"Import failed: {str(error)}") def render_import_ui_page(user: User):     menu_header("Import Habits", target=get_root_path())     async def on_upload(event: events.UploadEventArguments):         confirmation_dialog = display_import_confirmation_dialog(user, len(event.content.read().decode("utf-8")))         result = await confirmation_dialog         if result == "Yes":             await handle_file_upload(event, user)     ui.upload(on_upload=on_upload, max_files=1).props("accept=.json")     return