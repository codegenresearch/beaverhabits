import json\nimport logging\nfrom nicegui import events, ui\n\nfrom beaverhabits.app.db import User\nfrom beaverhabits.frontend.components import menu_header\nfrom beaverhabits.storage.dict import DictHabitList\nfrom beaverhabits.storage.meta import get_root_path\nfrom beaverhabits.storage.storage import HabitList\nfrom beaverhabits.views import user_storage\n\nlogging.basicConfig(level=logging.INFO)\n\nasync def import_from_json(text: str) -> HabitList:\n    try:\n        d = json.loads(text)\n        habit_list = DictHabitList(d)\n        if not habit_list.habits:\n            raise ValueError("No habits found")\n        return habit_list\n    except json.JSONDecodeError as e:\n        logging.error(f"JSON decode error: {e}")\n        raise ValueError("Invalid JSON")\n    except Exception as e:\n        logging.error(f"Unexpected error: {e}")\n        raise ValueError("Failed to import habits")\n\ndef import_ui_page(user: User):\n    def handle_upload(e: events.UploadEventArguments):\n        async def process_upload():\n            try:\n                text = e.content.read().decode("utf-8")\n                new_habit_list = await import_from_json(text)\n                current_habit_list = await user_storage.get_user_habit_list(user)\n                if current_habit_list:\n                    new_habits_set = set(habit.id for habit in new_habit_list.habits)\n                    current_habits_set = set(habit.id for habit in current_habit_list.habits)\n                    added_habits = new_habits_set - current_habits_set\n                    merged_habits = new_habits_set & current_habits_set\n                    unchanged_habits = current_habits_set - new_habits_set\n                    logging.info(f"Added: {len(added_habits)}, Merged: {len(merged_habits)}, Unchanged: {len(unchanged_habits)}")\n                    await user_storage.save_user_habit_list(user, new_habit_list)\n                    ui.notify(f"Added {len(added_habits)}, Merged {len(merged_habits)}, Unchanged {len(unchanged_habits)} habits", position="top", color="positive")\n                else:\n                    await user_storage.save_user_habit_list(user, new_habit_list)\n                    ui.notify(f"Imported {len(new_habit_list.habits)} habits", position="top", color="positive")\n            except ValueError as e:\n                ui.notify(str(e), color="negative", position="top")\n            except Exception as e:\n                logging.error(f"Unexpected error: {e}")\n                ui.notify("Import failed", color="negative", position="top")\n\n        with ui.dialog() as dialog, ui.card().classes("w-64"):\n            ui.label("Are you sure? All your current habits will be replaced.")\n            with ui.row():\n                ui.button("Yes", on_click=lambda: dialog.submit("Yes"))\n                ui.button("No", on_click=lambda: dialog.submit("No"))\n\n        async def confirm_and_process():\n            result = await dialog\n            if result == "Yes":\n                await process_upload()\n\n        ui.run_javascript(f"setTimeout(() => {{ {confirm_and_process.__name__}() }}, 100)")\n\n    menu_header("Import", target=get_root_path())\n    ui.upload(on_upload=handle_upload, max_files=1).props("accept=.json")\n    return\n