import json\nimport logging\nfrom nicegui import events, ui\nfrom beaverhabits.app.db import User\nfrom beaverhabits.frontend.components import menu_header\nfrom beaverhabits.storage.dict import DictHabitList\nfrom beaverhabits.storage.storage import HabitList\nfrom beaverhabits.views import user_storage\n\nlogging.basicConfig(level=logging.INFO)\n\ndef import_habit_list_from_json(text: str) -> HabitList:\n    try:\n        data = json.loads(text)\n        habit_list = DictHabitList(data)\n        if not habit_list.habits:\n            raise ValueError("No habits found in the imported data.")\n        return habit_list\n    except json.JSONDecodeError:\n        logging.error("Invalid JSON format")\n        raise ValueError("Invalid JSON format")\n\nasync def confirm_import(user: User, text: str):\n    dialog = ui.dialog()\n    with dialog, ui.card().classes("w-64"):\n        ui.label("Are you sure? All your current habits will be replaced.")\n        with ui.row():\n            ui.button("Yes", on_click=lambda: dialog.submit(True))\n            ui.button("No", on_click=lambda: dialog.submit(False))\n    if await dialog:\n        await import_and_merge_habit_list(user, text)\n\nasync def import_and_merge_habit_list(user: User, text: str):\n    try:\n        new_habit_list = import_habit_list_from_json(text)\n        current_habit_list = await user_storage.get_user_habit_list(user)\n        if current_habit_list:\n            merged_habit_list = await current_habit_list.merge(new_habit_list)\n        else:\n            merged_habit_list = new_habit_list\n        await user_storage.save_user_habit_list(user, merged_habit_list)\n        ui.notify(f"Imported {len(new_habit_list.habits)} habits", position="top", color="positive")\n        logging.info(f"Imported {len(new_habit_list.habits)} habits for user {user.email}")\n    except ValueError as ve:\n        ui.notify(str(ve), color="negative", position="top")\n        logging.error(f"ValueError during import: {ve}")\n    except Exception as e:\n        ui.notify(f"Import failed: {str(e)}", color="negative", position="top")\n        logging.error(f"Error during import: {e}")\n\nasync def handle_file_upload(e: events.UploadEventArguments, user: User):\n    try:\n        text = e.content.read().decode("utf-8")\n        await confirm_import(user, text)\n    except Exception as e:\n        ui.notify(f"Upload failed: {str(e)}", color="negative", position="top")\n        logging.error(f"Upload failed: {e}")\n\ndef import_ui_page(user: User):\n    menu_header("Import", target=get_root_path())\n    ui.upload(on_upload=lambda e: handle_file_upload(e, user), max_files=1).props("accept=.json")\n