import calendar\nfrom dataclasses import dataclass\nimport datetime\nfrom typing import Callable, Optional, Dict\nfrom beaverhabits.configs import settings\nfrom beaverhabits.frontend import icons\nfrom beaverhabits.logging import logger\nfrom beaverhabits.storage.dict import DAY_MASK, MONTH_MASK\nfrom beaverhabits.storage.storage import Habit, HabitList\nfrom beaverhabits.utils import WEEK_DAYS\nfrom nicegui import events, ui\nfrom nicegui.elements.button import Button\n\nstrptime = datetime.datetime.strptime\n\nclass DictHabit(Habit):\n    def __init__(self, name: str, star: bool = False, ticked_days: Optional[Dict[datetime.date, bool]] = None):\n        super().__init__(name, star)\n        self.ticked_days = ticked_days if ticked_days is not None else {}\n        self.status = 'active'\n\nclass DictHabitList(HabitList):\n    def __init__(self, habits: Optional[list[DictHabit]] = None):\n        super().__init__(habits if habits is not None else [])\n    \\    def filter_by_status(self, status: str):\\        return [habit for habit in self.habits if habit.status == status]\n\nclass HabitCheckBox(ui.checkbox):\n    def __init__(self, habit: DictHabit, day: datetime.date, text: str = \", *, value: bool = False) -> None:\\        super().__init__(text, value=value, on_change=self._async_task)\\        self.habit = habit\\        self.day = day\\        self._update_style(value)\\    \\    def _update_style(self, value: bool):\\        self.props(f'checked-icon="{icons.DONE}" unchecked-icon="{icons.CLOSE}" keep-color')\\        if not value:\\            self.props("color=grey-8")\\        else:\\            self.props("color=currentColor")\\    \\    async def _async_task(self, e: events.ValueChangeEventArguments):\\        self._update_style(e.value)\\        await self.habit.tick(self.day, e.value)\\        logger.info(f"Day {self.day} ticked: {e.value}")\\n\nclass HabitOrderCard(ui.card):\\    def __init__(self, habit: DictHabit | None = None) -> None:\\        super().__init__()\\        self.habit = habit\\        self.props("flat dense")\\        self.classes("py-0.5 w-full")\\        if habit:\\            self.props("draggable")\\            self.classes("cursor-grab")\\n\nclass HabitNameInput(ui.input):\\    def __init__(self, habit: DictHabit) -> None:\\        super().__init__(value=habit.name)\\        self.habit = habit\\        self.validation = self._validate\\        self.props("dense hide-bottom-space")\\        self.on("blur", self._async_task)\\    \\    async def _async_task(self):\\        self.habit.name = self.value\\        logger.info(f"Habit Name changed to {self.value}")\\    \\    def _validate(self, value: str) -> Optional[str]:\\        if not value:\\            return "Name is required"\\        if len(value) > 18:\\            return "Too long"\